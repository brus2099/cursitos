html {
  box-sizing: border-box;
  font-size: 16px;
  font-family: sans-serif;
  scroll-behavior: smooth;
}

*,
*::after,
*::before {
  box-sizing: inherit;
}

a[href="#top"] {
  margin: 1rem;
  display: block;
  font-size: 2rem;
  text-align: center;
  text-decoration: none;
}

p {
  margin: 0;
}

h2 {
  margin-top: 50vh;
  text-align: center;
}

img {
  margin: auto;
  display: block;
  max-width: 100%;
  height: auto;
}

.menu {
  margin-bottom: 100vh;
  font-size: 125%;
}

.menu li {
  margin-bottom: 1rem;
}

.container {
  margin: 0 auto;
  width: 80%;
  height: 80vh;
  background-color: #222;
  border: medium solid #000;
}

.item {
  padding: 1rem;
  font-size: 1.25rem;
  background-color: #666;
  border: medium solid #999;
}

.sub-item {
  padding: 5px;
  font-size: 1.25rem;
  background: #ddd;
  border: 2px solid #333;
}

.grid-explicit {
  display: grid;
  grid-template-columns: 50% 100px 1fr;
  grid-template-rows: 2rem 20vh 30%;

  grid-template-columns: repeat(5, 20%);
  grid-template-rows: repeat(4, 25%);
  grid-template-rows: repeat(4, auto);
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(4, 1fr);

  grid-template-columns: repeat(4, 23%);
  grid-template-rows: repeat(5, auto);
  grid-row-gap: 1px;
  grid-column-gap: 2px;
  row-gap: 2rem;
  column-gap: 4rem;
  gap: 2.7%;
}

.grid-explicit .item:nth-child(10) {
  color: #fff;
  grid-row-start: 2;
  grid-row-end: 3;
  grid-column-start: 2;
  grid-column-end: 3;

  grid-row: 2/3;
  grid-column: 3/5;
  grid-area: 2/3/3/5;
}

.grid-explicit .item:nth-child(12) {
  color: #6af;
  grid-row: span 2;
  grid-column: span 3;
}

/*definir todas las posiciones explicitamente de mis items
  no permitir al flujo de grid que manipule los items */
.grid-explicit .item:nth-child(15) {
  color: #f66;
  grid-row: 1/span 2;
  grid-column: 1/span 2;
}

.grid-line-names {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 1fr);

  grid-template-columns: [Cuno] 1fr [Cdos] 1fr [Ctres] 1fr [Ccuatro];
  grid-template-rows: [Runo] auto [Rdos] auto [Rtres] auto [Rcuatro];
}

.grid-line-names .item:nth-child(3) {
  color: #fff;
  grid-row: Rdos / Rtres;
  grid-column: Ctres / Ccuatro;
}

.grid-areas {
  display: grid;
  grid-template-columns: 1fr 200px;
  grid-template-rows: 100px repeat(2, 1fr) 60px;
  /* cada fila en una linea */
  grid-template-areas:
    "header header"
    "content sidebar"
    "content ."
    "footer footer";
  /* los puntos representan celdas vacias */
  /* cada linea un solo par de comillas */
}

.header {
  grid-area: header;
}

.content {
  grid-area: content;
}

.sidebar {
  grid-area: sidebar;
}

.footer {
  grid-area: footer;
}

.grid-implicit {
  width: 40%;
  display: grid;
  display: inline-grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(4, 200px);
}

.grid-flow {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(3, 200px);
  /* define flujo de grid: en que direccion muestran nuevos items */
  grid-auto-flow: row;
  /* tamaño de los elementos en grid implicita */
  grid-auto-rows: 100px;
  /* el mismo flujo pero en column */
  grid-auto-flow: column;
  /* sobreflujo implicito en column */
  grid-auto-columns: 50px;
}

.grid-flow-dense {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(4, 200px);
  /* no mames los items se recorrieron */
  /* las celdas vacias se rellenan por el acomodo explicito */
  /* los elementos que puedan aprovechar ese espacio lo van a hacer */
  /* jala en fila y tambien en columna */
  grid-auto-flow: column dense;
}

.grid-flow-dense .item:nth-child(11) {
  grid-row: span 3;
  grid-column: span 3;
}

.grid-layers {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(4, 1fr);
}

.grid-layers .item:nth-child(1) {
  background-color: #ff8;
  grid-column: 1 / 3;
  grid-row: 1 / 3;
}

.grid-layers .item:nth-child(2) {
  background-color: #88f;
  grid-column: 3 / 5;
  grid-row: 1 / 3;
}

.grid-layers .item:nth-child(3) {
  background-color: #f88;
  grid-column: 1 / 3;
  grid-row: 3 / 5;
}

.grid-layers .item:nth-child(5) {
  background-color: #ffb663;
  grid-column: 2 / 4;
  grid-row: 2 / 4;
}

.grid-layers .item:nth-child(4) {
  background-color: #8f8;
  grid-column: 3 / 5;
  grid-row: 3 / 5;
}

.grid-order {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(2, 1fr);
  grid-auto-flow: column;
}

.grid-order .item:nth-child(1) {
  /* valor por default de order es 0 */
  /* acepta positivos y negativos */
  order: 1;
}

.grid-order .item:nth-child(2) {
  /* aqui iba un 2 pero la propiedad se superpone al uno anterior */
  order: 1;
}

.grid-order .item:nth-child(5) {
  order: -1;
}

/*  order es una propiedad de baja jerarquia
    afecta el flujo natural de la grid, pero pierder su valor al ordenar con otras propiedades */

.grid-align {
  display: grid;
  grid-template-columns: repeat(3, 200px);
  grid-template-rows: repeat(2, 200px);
  /* strech es el valor por defecto */
  justify-items: strech;
  justify-items: start;
  justify-items: end;
  justify-items: center;
  align-items: stretch;
  align-items: start;
  align-items: center;
}

.grid-align-tracks {
  display: grid;
  grid-template-columns: repeat(3, 200px);
  grid-template-rows: repeat(2, 200px);
  justify-content: space-evenly;
  /* esta madre alinea las filas y columnas respecto a su contenedor */
  /* y el anterior lo hacia con los items respecto a su espacio que en ese caso era dentro de sus filas y columnas */
  /* y aqui lo hace como si filas y columnas fueran items y respecto a su contenedor */
  /* con align content es la misma madre pero en vertical */
  align-content: space-evenly;
}


.grid-min-max {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-columns: repeat(4, minmax(min-content, 200px));
  /* el ancho del elemento va a ser el elemento con mayor longitud, el que no se puede dividir */
  /* en este caso GridItem2 es mas largo que los demas */
  /* eso otorga el mismno amhco a item 6*/
  grid-template-columns: repeat(4, minmax(100px, min-content));
  /* ahora el tamaño maximo es el minimo contenido de las columnas */
  grid-template-columns: repeat(4, minmax(100px, max-content));
  /* el ancho se convierte en el contenido desplegado */
  /* el GridItem2 es el elemento con el contenido mas largo pero en este caso el item 5 tiene mas elementos, por lo que su contenido maximo es mayor */
  grid-template-columns: repeat(4, minmax(max-content, 200px));
  /* pinche propiedad aburrida */
}

.grid-repeat {
  display: grid;
  grid-template-columns: repeat(4, 10% 20% 30%);
  /* el primer numero en repeat es las veces, despues sigue el patron */
  grid-template-columns: repeat(1, 10% 20% 30% 40%);
  /* en filas este patron es más util */
  grid-template-rows: repeat(2, 10vh 20vh);
  grid-auto-rows: 150px;
  grid-auto-rows: repeat(2, 80px 120px);
  /* repeat solo funciona en template columns y template rows */
}

.grid-dynamics {
  display: grid;
  grid-template-columns: repeat(4, 100px);
  grid-template-columns: repeat(auto-fill, 100px); /* rellenar */
  /* rellena con elementos del mismo tamaño */
  grid-template-columns: repeat(auto-fit, 100px); /* ajustar */
  /* ajusta la grid con los tracks existentes */
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
}

.grid-responsive {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 5px;
}

.grid-nested {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  
}


.grid-explicit {
  display: grid;
  grid-template-columns: 50% 100px 1fr;
  grid-template-rows: 2rem 20vh 30%;
  grid-template-columns: repeat(5, 20%);
  grid-template-rows: repeat(4, auto);
}

.grid-nested {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
}

.sub-item {
  border: 3px solid #ddd;
  padding: 1rem;
  background: #aaa;
}

.grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(4, 1fr);
}

.subgrid {
  /* para que subgrid funcione, es necesario: */
  /*
    Definir explicitamente el tamaño que el padre (contenedor dentro del contenedor) va a ocupar
  */
  grid-column: span 3;
  grid-row: 1 / 3;
  /*
    Aplciar display grid al padre
  */
  display: grid;
  /*
    Aplicar el valor de subgrid a la propiedad que define columnas o filas, dependiendo lo que se necesite
  */
  grid-template-columns: subgrid;
  grid-template-rows: subgrid;
}